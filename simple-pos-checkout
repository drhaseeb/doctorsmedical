<?php
/**
 * Plugin Name: Simple POS Checkout for WooCommerce
 * Description: A simple POS checkout system for WooCommerce with product filtering, add to cart functionality, and display of expiry date and price.
 * Version: 1.0
 * Author: Your Name
 */

if ( ! defined( 'ABSPATH' ) ) {
    exit; // Exit if accessed directly.
}

add_action( 'wp_enqueue_scripts', 'enqueue_pos_checkout_scripts' );
function enqueue_pos_checkout_scripts() {
    wp_enqueue_script( 'jquery' );
}

add_shortcode( 'simple_pos_checkout', 'simple_pos_checkout_shortcode' );
function simple_pos_checkout_shortcode() {
    // Get all WooCommerce products
    $args = array(
        'post_type'      => 'product',
        'posts_per_page' => -1
    );
    $products = new WP_Query($args);

    ob_start();
    ?>
    <div class="row" id="pos-checkout">
        <div class="col-12 col-md-5" id="product-list">
            <div class="form-floating mb-3">
                <input type="text" class="form-control" id="product-filter" placeholder="name@example.com">
                <label for="product-filter">Filter Products...</label>
            </div>
            <ul class="list-group" id="products">
                <?php while ($products->have_posts()) : $products->the_post(); ?>
                    <li class="list-group-item position-relative" data-product-id="<?php echo get_the_ID(); ?>">
                        <div class="row">
                            <div class="col-10">
                                <p>
                                    <span class="product-name font-monospace"><?php the_title(); ?></span><span class="ms-2 product-unit-type badge text-bg-secondary"><?php echo get_post_meta(get_the_ID(), '_unit_type', true); ?></span>
                                </p>
                                <p>
                                    <span class="product-price badge text-bg-info"><?php echo wc_price(get_post_meta(get_the_ID(), '_price', true)); ?></span>
                                    <span class="product-expiry-date badge text-bg-danger"><?php echo get_post_meta(get_the_ID(), '_expiry_date', true); ?></span>
                                    
                                </p>
                            </div>
                            <div class="col-2">
                                <span class="add-to-cart-button btn btn-primary position-absolute h-100 top-0 end-0" data-product-id="<?php echo get_the_ID(); ?>"><i class="bi bi-plus"></i></span>
                            </div>
                        </div>
                    </li>
                <?php endwhile; wp_reset_query(); ?>
            </ul>
        </div>
        <div class="col-12 col-md-6" id="cart">
            <div id="cart-items"></div>
        </div>
    </div>
    <div class="d-flex flex-row-reverse my-5">
        <div class="w-auto" id="cart-totals">
            <div class="input-group mb-3">
                <span class="input-group-text" id="total-inputgp">Total</span>
                <span class="form-control grand-total">PKR 0.00</span>
            </div>
            <div class="input-group mb-3">
                <span class="input-group-text" id="discount-inputgp">Discount</span>
                <span class="form-control discount-total">PKR 0.00</span>
            </div>
            <button class="btn btn-primary float-end" id="checkout-button">Checkout</button>
        </div>
    </div>

    <script type="text/javascript">
    jQuery(document).ready(function($) {
        $('#product-filter').on('keyup', function() {
            var filter = $(this).val().toLowerCase();
            $('#products li').each(function() {
                var productName = $(this).find('.product-name').text().toLowerCase();
                if (productName.indexOf(filter) > -1) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });
        });

        $('#checkout-button').click(function() {
            var products = {};
            $('#cart-items div').each(function() {
                var productId = $(this).data('product-id');
                products[productId] = (products[productId] || 0) + 1;
            });

            // AJAX call to complete the order
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'post',
                data: {
                    action: 'complete_order',
                    products: products
                },
                success: function(order_id) {
                    alert('Order Completed! Order ID: ' + order_id);
                    // Here you can redirect to a thank you page or clear the cart
                    products = {};
                    cart = {};
                    updateCartDisplay();
                }
            });
        });

        var cart = {};

        function updateCartDisplay() {
            var grandTotal = 0;
            $('#cart-items').empty();
            $.each(cart, function(productId, details) {
                var lineTotal = details.price * details.quantity;
                grandTotal += lineTotal;
                $('#cart-items').append(
                    '<div class="card">' +
                        '<div class="card-body">' +
                            '<div class="row">' +
                                '<div class="input-group" data-product-id="' + productId + '">' +
                                    '<span class="input-group-text">' + details.name + '</span>' +
                                    '<input type="number" class="form-control editable-quantity" value="' + details.quantity + '" min="0">' +
                                    '<input type="number" class="form-control editable-price" value="' + details.price.toFixed(2) + '" min="0">' +
                                    '<span class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">%<span class="position-absolute top-0 start-100 translate-middle p-1 bg-success rounded-circle discount-badge" style="display:none"><span class="visually-hidden">Discount alert</span></span></span>' +
                                        '<ul class="dropdown-menu discount-dropdown">' +
                                            '<li><a class="dropdown-item">0%</a></li>' +
                                            '<li><a class="dropdown-item">5%</a></li>' +
                                            '<li><a class="dropdown-item">10%</a></li>' +
                                        '</ul>' +
                                    '<span class="input-group-text">' + lineTotal.toFixed(2) + '</span>' +
                                    '<span class="input-group-text remove-from-cart-button">-</span>' +
                                '</div>' +
                            '</div>' +
                        '</div>' +
                    '</div>');
            });
            discountTotal = calculateTotalDiscount(); // Recalculate the total discount
            $('.grand-total').text('PKR ' + (grandTotal - discountTotal).toFixed(2));
            $('.discount-total').text('PKR ' + discountTotal.toFixed(2));
        }

        // Function to calculate the total discount based on the cart contents
        function calculateTotalDiscount() {
            var totalDiscount = 0;
            $.each(cart, function(productId, details) {
                var originalPrice = details.originalPrice;
                var discountedPrice = details.price;
                var discountPerItem = originalPrice - discountedPrice;
                totalDiscount += discountPerItem * details.quantity;
            });
            return totalDiscount;
        }

        $(document).on('change', '.editable-price', function() {
            var newPrice = parseFloat($(this).val());
            var productId = $(this).closest('div').data('product-id');
            var originalPrice = cart[productId].originalPrice;
            if (newPrice <= originalPrice) {
                cart[productId].price = newPrice;
            } else {
                $(this).val(cart[productId].price.toFixed(2));
            }
            updateCartDisplay();
            updateBadgeDisplay(productId, newPrice, originalPrice);
        });

        function updateBadgeDisplay(productId, newPrice, originalPrice) {
            var discountBadge = $('div[data-product-id="' + productId + '"]').find('.discount-badge');

            // Remove any existing badges
            discountBadge.css('display', 'none');

            // Add the badge if the new price is different from the original price
            if (newPrice < originalPrice ) {
                discountBadge.css('display', 'inline-block'); // or whatever display value you need
            }
        }

        $('.add-to-cart-button').click(function() {
            var productId = $(this).data('product-id');
            var productItem = $(this).closest('.list-group-item');
            var productName = productItem.find('.product-name').text();
            var productPrice = parseFloat(productItem.find('.product-price').text().replace(/[^0-9.-]+/g,""));
            if (!cart[productId]) {
                cart[productId] = {
                    name: productName,
                    price: productPrice,
                    originalPrice: productPrice,
                    quantity: 1
                };
            } else {
                cart[productId].quantity++;
            }
            updateCartDisplay();
        });

        $(document).on('click', '.discount-dropdown a', function() {
            var productId = $(this).closest('div').data('product-id');
            var discountText = $(this).text();
            var discountPercentage = parseFloat(discountText.replace('%', ''));
            var originalPrice = cart[productId].originalPrice;
            var newPrice;

            // Check if the discount text is '0%' to remove the discount
            if (discountText === '0%') {
                newPrice = cart[productId].originalPrice;
            } else {
                newPrice = cart[productId].originalPrice * (1 - discountPercentage / 100);
            }
            cart[productId].price = newPrice;

            $(this).closest('div').find('.editable-price').val(newPrice.toFixed(2)).change();
            updateCartDisplay();
            updateBadgeDisplay(productId, newPrice, originalPrice);
        });

        $(document).on('change', '.editable-quantity', function() {
            var productId = $(this).closest('div').data('product-id');
            var newQuantity = parseFloat($(this).val());
            cart[productId].quantity = newQuantity;
            updateCartDisplay();
        });

        $('#cart').on('click', '.remove-from-cart-button', function() {
            var productId = $(this).parent().data('product-id');
            delete cart[productId];
            updateCartDisplay();
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

// Handle AJAX request for completing the order
add_action( 'wp_ajax_complete_order', 'complete_order_callback' );
add_action( 'wp_ajax_nopriv_complete_order', 'complete_order_callback' );
function complete_order_callback() {
    $product_ids = $_POST['products'];

    // Create the order
    $order = wc_create_order();

    // Add products to the order
    foreach ( $product_ids as $id => $quantity ) {
        $product = wc_get_product( $id );
        $order->add_product( $product, $quantity );
    }

    // Calculate totals
    $order->calculate_totals();

    // Set order status to 'completed'
    $order->update_status('completed');

    // Save the order and get its ID
    $order_id = $order->save();

    // Return the order ID
    echo $order_id;

    wp_die(); // this is required to terminate immediately and return a proper response
}
?>
